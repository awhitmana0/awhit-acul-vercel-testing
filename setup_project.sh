#!/bin/bash

# --- Project Setup Script for React + Shadcn/ui with Vercel ---
# This script creates the necessary files and directories for your custom
# Auth0 login view project, ready for deployment on Vercel.

echo "Starting project setup..."

# 1. Create necessary directories
echo "Creating directories..."
# 'public' directory is still created for other static assets like vite.svg
mkdir -p public
mkdir -p src/components/ui
mkdir -p src/lib

# 2. Create package.json
echo "Creating package.json..."
cat << 'EOF' > package.json
{
  "name": "awhit-acul-vercel-testing",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "tailwind-merge": "^2.3.0",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.19",
    "eslint": "^8.57.0",
    "eslint-plugin-react": "^7.34.2",
    "eslint-plugin-react-hooks": "^4.6.2",
    "eslint-plugin-react-refresh": "^0.4.7",
    "postcss": "^8.4.38",
    "tailwindcss": "^3.4.4",
    "vite": "^5.3.1"
  }
}
EOF

# 3. Create vite.config.js
echo "Creating vite.config.js..."
cat << 'EOF' > vite.config.js
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  // When index.html is at the project root, Vite automatically uses it as the entry.
  // 'public' is also the default public directory, so publicDir doesn't need to be explicitly set
  // unless you change its name.
  build: {
    outDir: 'dist',
    rollupOptions: {
      output: {
        entryFileNames: `assets/[name].js`,
        chunkFileNames: `assets/[name].js`,
        assetFileNames: `assets/[name].[ext]`
      }
    }
  }
});
EOF

# 4. Create tailwind.config.js
echo "Creating tailwind.config.js..."
cat << 'EOF' > tailwind.config.js
/** @type {import('tailwindcss').Config} */
export default {
  // Specify files where Tailwind should look for classes
  content: [
    "./index.html", // Now at the root
    "./public/**/*.html", // Still include public HTML files if any other are added
    "./src/**/*.{js,ts,jsx,tsx}", // Include all JS/TS/JSX/TSX files in src
    // Add paths for shadcn/ui components if they are in a specific folder
    "./src/components/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      // Custom theme extensions, e.g., custom colors, fonts
      fontFamily: {
        inter: ['Inter', 'sans-serif'], // Add Inter font
      },
    },
  },
  plugins: [
    require("tailwindcss-animate") // Required for Shadcn/ui animations
  ],
}
EOF

# 5. Create postcss.config.js
echo "Creating postcss.config.js..."
cat << 'EOF' > postcss.config.js
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
EOF

# 6. Create .gitignore
echo "Creating .gitignore..."
cat << 'EOF' > .gitignore
# Log files
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*
.pnpm-store/

# Dependency directories
node_modules/
jspm_packages/

# Build artifacts
dist/
build/
.vite/

# Environment variables
.env
.env.local
.env.*.local

# IDE-specific files
.idea/
.vscode/
*.iml
.DS_Store
EOF

# 7. Create index.html (now at the root)
echo "Creating index.html in the root directory..."
cat << 'EOF' > index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Custom Auth0 Login (React + Shadcn/ui)</title>
</head>
<body>
    <div id="root"></div>
    <!-- This script tag is generated by Vite during the build process -->
    <!-- It will load your compiled React application (your bundle.js) -->
    <script type="module" src="/src/main.jsx"></script>
</body>
</html>
EOF

# 8. Create src/index.css
echo "Creating src/index.css..."
cat << 'EOF' > src/index.css
/* src/index.css */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

/* Basic styling for the body */
body {
  font-family: 'Inter', sans-serif;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* You can add global custom styles here if needed */
EOF

# 9. Create src/lib/utils.js
echo "Creating src/lib/utils.js..."
cat << 'EOF' > src/lib/utils.js
// src/lib/utils.js
import { clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs) {
  return twMerge(clsx(inputs));
}
EOF

# 10. Create src/components/ui/button.jsx
echo "Creating src/components/ui/button.jsx..."
cat << 'EOF' > src/components/ui/button.jsx
// src/components/ui/button.jsx
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva } from "class-variance-authority";

import { cn } from "../../lib/utils"; // Adjust path if your utils.js is elsewhere

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

const Button = React.forwardRef(({ className, variant, size, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button";
  return (
    <Comp
      className={cn(buttonVariants({ variant, size, className }))}
      ref={ref}
      {...props}
    />
  );
});
Button.displayName = "Button";

export { Button, buttonVariants };
EOF

# 11. Create src/main.jsx
echo "Creating src/main.jsx..."
cat << 'EOF' > src/main.jsx
// src/main.jsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App.jsx';
import './index.css'; // Import your global CSS and Tailwind directives

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
);
EOF

# 12. Create src/App.jsx
echo "Creating src/App.jsx..."
cat << 'EOF' > src/App.jsx
// src/App.jsx
import React from 'react';
import { Button } from './components/ui/button'; // Import the Shadcn/ui Button

function App() {
  // This is where your Auth0 Lock/Login.js initialization logic would go
  // when you integrate it into the React component lifecycle, e.g., in a useEffect hook.
  // For now, we'll just display a placeholder.

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100 p-4">
      <div className="bg-white p-8 rounded-xl shadow-lg w-full max-w-md text-center border border-gray-200">
        <div className="mb-6">
          {/* Placeholder for your logo */}
          <img
            src="https://placehold.co/120x60/667EEA/FFFFFF?text=Your+Logo"
            alt="Company Logo"
            className="mx-auto"
          />
        </div>
        <h1 className="text-3xl font-bold text-gray-900 mb-4">Welcome Back!</h1>
        <p className="text-gray-600 mb-8">
          This is your custom login page built with React and Shadcn/ui.
        </p>

        {/* This div will eventually host the Auth0 login form */}
        <div id="auth0-login-container" className="space-y-4">
          {/* Example Shadcn/ui Button */}
          <Button className="w-full" onClick={() => console.log('Login button clicked!')}>
            Continue to Login
          </Button>
          <p className="text-sm text-gray-500 mt-4">
            (This UI is rendered by React using Shadcn/ui components.)
          </p>
        </div>
      </div>
    </div>
  );
}

export default App;
EOF

echo "All files and directories created successfully!"
echo "Next steps:"
echo "1. Navigate into the project directory (if you're not already there)."
echo "2. Run 'npm install' to install dependencies."
echo "3. Commit your changes to Git and push to your GitHub repository."
echo "4. Vercel will automatically deploy the updated project."
